package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"golang-whatsapp-clone/graph/model"
	"time"
)

// Example is the resolver for the example field.
func (r *mutationResolver) Example(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Example - example"))
}

// Example is the resolver for the example field.
func (r *queryResolver) Example(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Example - example"))
}

// Example is the resolver for the example field.
func (r *subscriptionResolver) Example(ctx context.Context) (<-chan *string, error) {
	panic(fmt.Errorf("not implemented: Example - example"))
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.AppTime, error) {
	ch := make(chan *model.AppTime)

	go func() {
		defer close(ch)

		for {
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			currentTime := time.Now()
			t := &model.AppTime{
				UnixTime:  int32(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			select {
			case <-ctx.Done(): // this runs when context get cancelled. Subscription closes
				fmt.Println("Subscription cancelled")
				// Handle deregistration of the channel here. `close(ch)`
				return // remember to return to end the routine
			case ch <- t: // this is the actual send.
				// our message went thought, do nothing
			}
		}
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
