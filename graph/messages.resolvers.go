package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"
	customerrors "golang-whatsapp-clone/errors"
	"golang-whatsapp-clone/graph/model"
)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (model.SendMessageResult, error) {
	panic(fmt.Errorf("not implemented: SendMessage - sendMessage"))
}

// MarkConversationAsRead is the resolver for the markConversationAsRead field.
func (r *mutationResolver) MarkConversationAsRead(ctx context.Context, input model.MarkConversationAsReadInput) (model.MarkConversationAsReadResult, error) {
	panic(fmt.Errorf("not implemented: MarkConversationAsRead - markConversationAsRead"))
}

// EditMessage is the resolver for the editMessage field.
func (r *mutationResolver) EditMessage(ctx context.Context, input model.EditMessageInput) (model.EditMessageResult, error) {
	panic(fmt.Errorf("not implemented: EditMessage - editMessage"))
}

// StartDirectConversation is the resolver for the startDirectConversation field.
func (r *mutationResolver) StartDirectConversation(ctx context.Context, input model.StartDirectConversationInput) (model.StartDirectConversationResult, error) {
	user, graphqlError := r.mustGetAuthenticatedUser(ctx)

	if graphqlError != nil {
		return graphqlError, nil
	}

	conversation, err := r.ConversationService.GetOrCreateDirectConversation(ctx, user.UserID, input.ParticipantID)

	if err != nil {
		return model.ServerError{
			Message: "Error to create the conversation",
			Code:    customerrors.CodeInternalError,
		}, nil
	}

	lastMessageAt := conversation.LastMessageAt.Time.String()

	conversationType := model.ConversationTypeEnumDirect
	if conversation.Type == model.ConversationTypeEnumGroup.String() {
		conversationType = model.ConversationTypeEnumGroup
	}

	return model.StartDirectConversationSuccess{
		Success: true,
		Conversation: &model.Conversation{
			ID:            conversation.ID.String(),
			Type:          conversationType,
			Name:          &conversation.Name.String,
			AvatarURL:     &conversation.AvatarUrl.String,
			CreatedAt:     conversation.CreatedAt.Time.String(),
			UpdatedAt:     conversation.UpdatedAt.Time.String(),
			LastMessageAt: &lastMessageAt,
		},
	}, nil
}

// MyConversations is the resolver for the myConversations field.
func (r *queryResolver) MyConversations(ctx context.Context) (model.MyConversationsQueryResult, error) {
	user, graphqlError := r.mustGetAuthenticatedUser(ctx)

	if graphqlError != nil {
		return graphqlError, nil
	}

	myConversations, err := r.ConversationService.GetUserConversations(ctx, user.UserID)
	if err != nil {
		if errors.Is(err, customerrors.ErrInvalidUUIDValue) {
			return model.ServerError{
				Message: "invalid user id",
				Code:    customerrors.CodeInternalError,
			}, nil
		}
	}

	r.Logger.Debug().Msgf("my conversations result: %+v", myConversations)

	var conversations model.MyConversationsQueryResult

	return conversations, nil
}

// ConversationMessages is the resolver for the conversationMessages field.
func (r *queryResolver) ConversationMessages(ctx context.Context, input model.ConversationMessageInput) (model.ConversationMessagesQueryResult, error) {
	panic(fmt.Errorf("not implemented: ConversationMessages - conversationMessages"))
}

// GetOrCreateDirectConversation is the resolver for the getOrCreateDirectConversation field.
func (r *queryResolver) GetOrCreateDirectConversation(ctx context.Context, input model.GetOrCreateDirectConversationInput) (model.GetOrCreateDirectConversationResult, error) {
	panic(fmt.Errorf("not implemented: GetOrCreateDirectConversation - getOrCreateDirectConversation"))
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, input model.MessageAddedSubscriptionInput) (<-chan *model.Message, error) {
	panic(fmt.Errorf("not implemented: MessageAdded - messageAdded"))
}

// ConversationUpdated is the resolver for the conversationUpdated field.
func (r *subscriptionResolver) ConversationUpdated(ctx context.Context, input model.ConversationUpdatedSubscriptionInput) (<-chan *model.ConversationListItem, error) {
	panic(fmt.Errorf("not implemented: ConversationUpdated - conversationUpdated"))
}

// UserTyping is the resolver for the userTyping field.
func (r *subscriptionResolver) UserTyping(ctx context.Context, input model.UserTypingSubscriptionInput) (<-chan *model.TypingEvent, error) {
	panic(fmt.Errorf("not implemented: UserTyping - userTyping"))
}
