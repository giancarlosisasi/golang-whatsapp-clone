// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversation_participants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUnreadMessages = `-- name: CountUnreadMessages :one
SELECT COUNT(*)::INTEGER
FROM messages m
JOIN conversation_participants cp ON m.conversation_id = cp.conversation_id
WHERE cp.user_id = $1
    AND cp.conversation_id = $2
    AND cp.is_active = true
    AND m.created_at > cp.last_read_at
    AND m.sender_id != $1
`

type CountUnreadMessagesParams struct {
	UserID         pgtype.UUID
	ConversationID pgtype.UUID
}

func (q *Queries) CountUnreadMessages(ctx context.Context, arg CountUnreadMessagesParams) (int32, error) {
	row := q.db.QueryRow(ctx, countUnreadMessages, arg.UserID, arg.ConversationID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

type CreateParticipantsParams struct {
	ConversationID pgtype.UUID
	UserID         pgtype.UUID
	Role           string
}

const getParticipantByUserAndConversation = `-- name: GetParticipantByUserAndConversation :one
SELECT id, conversation_id, user_id, joined_at, last_read_at, is_active, role, created_at, updated_at FROM conversation_participants
WHERE user_id = $1 AND conversation_id = $2 AND is_active = true
`

type GetParticipantByUserAndConversationParams struct {
	UserID         pgtype.UUID
	ConversationID pgtype.UUID
}

func (q *Queries) GetParticipantByUserAndConversation(ctx context.Context, arg GetParticipantByUserAndConversationParams) (ConversationParticipant, error) {
	row := q.db.QueryRow(ctx, getParticipantByUserAndConversation, arg.UserID, arg.ConversationID)
	var i ConversationParticipant
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.UserID,
		&i.JoinedAt,
		&i.LastReadAt,
		&i.IsActive,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateParticipantLastReadAt = `-- name: UpdateParticipantLastReadAt :exec
UPDATE conversation_participants
SET
    last_read_at = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND conversation_id = $3
`

type UpdateParticipantLastReadAtParams struct {
	UserID         pgtype.UUID
	LastReadAt     pgtype.Timestamptz
	ConversationID pgtype.UUID
}

func (q *Queries) UpdateParticipantLastReadAt(ctx context.Context, arg UpdateParticipantLastReadAtParams) error {
	_, err := q.db.Exec(ctx, updateParticipantLastReadAt, arg.UserID, arg.LastReadAt, arg.ConversationID)
	return err
}
