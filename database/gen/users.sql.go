// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, google_id, email, avatar_url, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GoogleID,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, name, google_id, email, avatar_url, created_at, updated_at
FROM users
WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GoogleID,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUserByGoogleAuthSafe = `-- name: UpsertUserByGoogleAuthSafe :one
INSERT INTO users (name, google_id, email, avatar_url, updated_at)
VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
ON CONFLICT (email) DO UPDATE SET
    name = CASE
        WHEN users.name IS NULL OR users.name = '' THEN EXCLUDED.name
        ELSE COALESCE(EXCLUDED.name, users.name)
    END,
    google_id = COALESCE(users.google_id, EXCLUDED.google_id),
    avatar_url = COALESCE(EXCLUDED.avatar_url, users.avatar_url),
    updated_at = CURRENT_TIMESTAMP
RETURNING id, name, google_id, email, avatar_url, created_at, updated_at
`

type UpsertUserByGoogleAuthSafeParams struct {
	Name      pgtype.Text
	GoogleID  pgtype.Text
	Email     string
	AvatarUrl pgtype.Text
}

func (q *Queries) UpsertUserByGoogleAuthSafe(ctx context.Context, arg UpsertUserByGoogleAuthSafeParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUserByGoogleAuthSafe,
		arg.Name,
		arg.GoogleID,
		arg.Email,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GoogleID,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
